Demonstrate, with focus on security, a proposal for an Express/Mongo+Angular-seed with built in support
for most of the basic security problems, SSL and ready to deploy on your favourite Cloud Hosting Service:

Back-end: app folder.

Front-end: public folder.


Explain basic security terms like authentication, authorization, confidentiality, integrity, SSL/TLS and
provide examples of how you have used them:

Authentication:
Confirming the identity of a client (via some kind of login procedure)
Authorization:
Determing whether an authenticated client is allowed to receive a service or perform an operation
Confidentiality:
Protection from disclosure to unauthorised persons
Integrity:
Maintaining data consistency (data cannot be modified)


Explain basic security threads like:
Cross Site Scripting (XSS):

SQL Injection:
SQL injection is a technique where malicious users can inject SQL commands into an SQL statement, via web page input.
Injected SQL commands can alter SQL statement and compromise the security of a web application.


Explain, at a fundamental level, the technologies involved, and the steps required initialize a SSL connection
between a browser and a server and how to use SSL in a secure way.


Explain and demonstrate ways to protect user passwords on our backends, and why this is necessary.


Explain about password hashing, salts and the difference between bcrypt and older (not recommended)
algorithms like sha1, md5 etc:

Bcrypt is slow compared to the older methods like sha and md5. That's the purpose.


Explain about JSON Web Tokens (jwt) and why they are very suited for a REST-based API


Explain and demonstrate a system using jwt's, focusing on both client and server side.


Explain and demonstrate use of the npm passportjs module:
https://github.com/Sindt/Passportjs-facebook.git


Explain, at a very basic level, OAuth 2 + OpenID Connect and the problems it solves.